start: s
accept: ac
reject: rj
blank: _
s _ -> ac _ ^
s 0 -> erase_all _ >
erase_all [*, 0, 1] -> erase_all _ >
erase_all _ -> ac 0 ^
s 1 -> put_equals_and_zero 1 <
put_equals_and_zero _ -> put_zero = <
put_zero _ -> skip_to_b_first_digit 0 >
skip_to_b_first_digit [=, 0, 1] >
skip_to_b_first_digit * -> b_first_digit * >
b_first_digit 0 -> erase_all_back _ <
erase_all_back [*, =, 0, 1] -> erase_all_back _ <
erase_all_back _ -> ac 0 ^
b_first_digit 1 -> prepare_copy_a x <
prepare_copy_a [*, x, 0, 1] <
prepare_copy_a = -> put_plus = <
put_plus [0, 1] <
put_plus _ -> start_copy_a + >
start_copy_a [=, 0, 1] >
start_copy_a * -> copy_a * <
copy_a 0 -> carry_0 a <
copy_a 1 -> carry_1 b <
copy_a = -> sum_prepare = <
carry_0 [+, =, 0, 1] <
carry_1 [+, =, 0, 1] <
carry_0 _ -> take_next_digit 0 >
carry_1 _ -> take_next_digit 1 >
take_next_digit [+, =, 0, 1] >
take_next_digit [a, b] -> copy_a [a, b] <
sum_prepare [+, 0, 1] <
sum_prepare _ -> sum_start _ >
sum_start [0, 1, a, b, +] >
sum_start [_, =] -> sum_add_next_digit [_, =] <
sum_add_next_digit 0 -> sum_carry_0 _ <
sum_add_next_digit 1 -> sum_carry_1 _ <
sum_add_next_digit + -> sum_finish _ <
sum_carry_0 [0, 1] <
sum_carry_1 [0, 1] <
sum_carry_0 + -> sum_carry_0_after_plus + <
sum_carry_1 + -> sum_carry_1_after_plus + <
sum_carry_0_after_plus [a, b] <
sum_carry_0_after_plus [_, 0, 1] -> sum_start [a, a, b] >
sum_carry_1_after_plus [a, b] <
sum_carry_1_after_plus [_, 0] -> sum_start [b, b] >
sum_carry_1_after_plus 1 -> sum_incr a <
sum_incr [_, 0] -> sum_start [1, 1] >
sum_incr 1 -> sum_incr 0 <
sum_finish [0, 1] <
sum_finish [a, b] -> sum_finish [0, 1] <
sum_finish _ -> move_prepare _ >
move_prepare 1 -> move_start b >
move_start [0, 1] >
move_start _ -> move_take_next_digit _ <
move_take_next_digit _ <
move_take_next_digit 0 -> move_carry_0 _ >
move_take_next_digit 1 -> move_carry_1 _ >
move_take_next_digit b -> move_carry_last_1 _ >
move_carry_0 _ >
move_carry_1 _ >
move_carry_last_1 _ >
move_carry_0 [=, 0, 1] -> move_put_0 [=, 0, 1] <
move_carry_1 [=, 0, 1] -> move_put_1 [=, 0, 1] <
move_carry_last_1 [=, 0, 1] -> move_put_last_1 [=, 0, 1] <
move_put_0 _ -> move_take_next_digit 0 <
move_put_1 _ -> move_take_next_digit 1 <
move_put_last_1 _ -> b_next_digit 1 >
b_next_digit [*, =, 0, 1] >
b_next_digit [a, b] -> b_next_digit [0, 1] >
b_next_digit x -> b_take_next_digit x >
b_take_next_digit x >
b_take_next_digit _ -> finish _ <
finish [*, 0, 1, x] -> finish _ <
finish = -> to_res_beginning _ <
to_res_beginning [0, 1] <
to_res_beginning _ -> ac _ >
b_take_next_digit [0, 1] -> prepare_double_res [x, b] <
b_take_next_digit b -> prepare_copy_a x <
prepare_double_res [*, 0, 1, x] <
prepare_double_res = -> start_double_res = <
start_double_res [0, 1] <
start_double_res _ -> double_res _ >
double_res 0 -> double_carry_0 _ <
double_res 1 -> double_carry_1 _ <
double_res _ >
double_res = -> double_put_0 = <
double_put_0 _ -> b_next_digit 0 >
double_carry_0 _ -> double_res 0 >
double_carry_1 _ -> double_res 1 >
